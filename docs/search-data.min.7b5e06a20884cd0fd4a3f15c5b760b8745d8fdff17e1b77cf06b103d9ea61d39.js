(function(){const pages=[{"idx":0,"href":"/docs/overview/connect/","title":"Connect to Database","content":" Connect to Database MPORM can only connect MySQL database, and has two different ways to load configs of database\nLoad By DSN The minimum code that loads by dsn is wriiten as\nfrom mporm import ORM, DSN ORM.load(DSN(user=\u0026#34;xxxx\u0026#34;, password=\u0026#34;xxxx\u0026#34;)) Because mporm will automatically set other configs as host = \u0026ldquo;localhost\u0026rdquo;, port = 3306, database = \u0026ldquo;test\u0026rdquo;, charset = \u0026ldquo;utf8\u0026rdquo;\nOf course you can fill all the configs by yourself\nLoad From Toml File You can write all the configs in a toml file like\n[database] user = \u0026#34;xxxx\u0026#34; password = \u0026#34;xxxx\u0026#34; host = \u0026#34;xxxx\u0026#34; port = 3306 database = \u0026#34;xxxx\u0026#34; charset = \u0026#34;xxxx\u0026#34; Then use load_file method\nfrom mporm import ORM ORM.load_file(\u0026#34;path/to/toml\u0026#34;) Note that if you use the second way, remember all the 6 configs needs to be written in the toml file.\n"},{"idx":1,"href":"/docs/crud/","title":"Crud","content":" CRUD Interface We have defined a model \u0026ldquo;Hero\u0026rdquo; previously\nfrom mporm import Model, StrField, IntField, BoolField class Hero(Model): __prefix__ \u0026#34;Marvel\u0026#34; name = StrField(capacity=32) age = IntField(size=32) alive = BoolField(default=True)"},{"idx":2,"href":"/docs/overview/model/","title":"Define a Model","content":" Define a Model mporm.Model mporm.Model is a Python class that includes the following fields: id, created_at, updated_at. You need to use it by inheritance.\nSo let\u0026rsquo;s define a model named \u0026ldquo;Hero\u0026rdquo;\nfrom mporm import Model class Hero(Model): ... You should know that MPORM uses uuid for field id and there\u0026rsquo;s no the auto increase thing you can do about it.\nNow we\u0026rsquo;d like to have our customized fields\nfrom mporm import Model, StrField, IntField, BoolField class Hero(Model): name = StrField(capacity=32) age = IntField(size=32) alive = BoolField(default=True) You can see fields are defined by other classes from MPORM and each can take arguments\nHere\u0026rsquo;s all the fields and arguments that\u0026rsquo;re available in MPORM:\n    capacity size default not_null auto_update     StrField 255  null False    IntField  64 null False    BoolField  1 False True    FloatField  32(64) null False    TimeField   NOW() False False    The values in the chart\u0026rsquo;s body are the default value for each argument of each field.\nDon\u0026rsquo;t you ever think about other advanced association fields!\nTherefore you can actually define your model with minimum codes like\nfrom mporm import Model, StrField, IntField, BoolField class Hero(Model): name = StrField() age = IntField() which\u0026rsquo;s not recommended.\nAnyways, you just define whatever that\u0026rsquo;s needed for your project.\nCreate Table When the model is correctly defined\nHero.create() will create a table named \u0026ldquo;hero\u0026rdquo; in the specified database.\nDrop Table To drop the table\nHero.drop() is all you need to write.\nTable Name Prefix A __prefix__ attribute can be embed into the model to tell MPORM that you want a prefix for the table name in the database.\nfrom mporm import Model, StrField, IntField, BoolField class Hero(Model): __prefix__ = \u0026#34;Marvel\u0026#34; name = StrField() age = IntField() Now,\nHero.create() will create a table named \u0026ldquo;marvel_hero\u0026rdquo; with all converted into lowercases instead of just \u0026ldquo;hero\u0026rdquo;.\n"},{"idx":3,"href":"/docs/crud/delete/","title":"Delete","content":" Delete Hero.where(name=\u0026#34;Thor\u0026#34;).delete() ## delete from `marvel_hero` where name = \u0026#34;Thor\u0026#34;; Note that the methods insert() update() delete() return the amount of rows that\u0026rsquo;re affected and method find() returns a list-typed query result and not to mention, the method findone() returns a dict-typed query result.\n"},{"idx":4,"href":"/docs/crud/create/","title":"Insert","content":" Insert There are two methods you can choose from:\nHero.new(name=\u0026#34;Thor\u0026#34;, age=1000).insert() or simply use\nHero.add(name=\u0026#34;Thor\u0026#34;, age=1000) The SQL statement that\u0026rsquo;ll be executed is\ninsert into `marvel_hero` (name, age) values (\u0026#39;Thor\u0026#39;, 1000);"},{"idx":5,"href":"/docs/overview/installation/","title":"Installation","content":" Installation Requirement  Python 3+  Install By PIP pip3 install mporm"},{"idx":6,"href":"/docs/","title":"Overview","content":" Overview Features gorm-like API Automatically use uuid as field id Automatically set created_at and updated_at  Quick Start from mporm import ORM, DSN, Model, StrField, IntField ORM.load(DSN(user=\u0026#34;xxxx\u0026#34;, password=\u0026#34;xxxx\u0026#34;)) class Hero(Model): name = StrField() age = IntField() Hero.create() # CRUD Hero.add(name=\u0026#34;Thor\u0026#34;, age=1000) Hero.where(name=\u0026#34;Thor\u0026#34;).set(age=1001).update() Hero.where(name=\u0026#34;Thor\u0026#34;).find() Hero.where(name=\u0026#34;Thor\u0026#34;).delete() Hero.drop()"},{"idx":7,"href":"/docs/crud/query/","title":"Select","content":" Select Simple Query Hero.first() ## select * from `mar vel_hero` order by created_at limit 1; Hero.last() ## select * from `marvel_hero` order by created_at desc limit 1; Hero.take() ## select * from `marvel_hero` limit 1; Plus they can take an argument\nHero.first(10) ## select * from `marvel_hero` order by created_at limit 10; Hero.last(10) ## select * from `marvel_hero` order by created_at desc limit 10; Hero.take(10) ## select * from `marvel_hero` limit 10; Where Hero.where(name=\u0026#34;Thor\u0026#34;, age=1000).find() ## select * from `marvel_hero` where name = \u0026#39;Thor\u0026#39; and age = 1000; Hero.where(name=\u0026#34;Thor\u0026#34;, age=1000).findone() ## select * from `marvel_hero` where name = \u0026#39;Thor\u0026#39; and age = 1000 limit 1; Of course, Specified Fields Selecting is available\nHero.where(name=\u0026#34;Thor\u0026#34;, age=1000).select(\u0026#34;name\u0026#34;).find() ## select name from `marvel_hero` where name = \u0026#39;Thor\u0026#39; and age = 1000; Or you can simply use\nHero.where(name=\u0026#34;Thor\u0026#34;, age=1000).filter(\u0026#34;name\u0026#34;) ## select name from `marvel_hero` where name = \u0026#39;Thor\u0026#39; and age = 1000; Count Hero.where(alive=True).count() ## select count(id) from `marvel_hero` where alive = 1; Also custom count field is available\nHero.where(alive=True).count(\u0026#34;name\u0026#34;) ## select count(name) from `marvel_hero` where alive = 1; Advanced Order Hero.where(alive=True).order(\u0026#34;age\u0026#34;, desc=True).find() ## select * from `marvel_hero` where alive = 1 order by age desc; Limit Hero.where(name=\u0026#34;Thor\u0026#34;).limit(10).find() ## select * from `marvel_hero` where name = \u0026#39;Thor\u0026#39; limit 10; Offset Hero.where(name=\u0026#34;Thor\u0026#34;).offset(10).find() ## select * from `marvel_hero` where name = \u0026#39;Thor\u0026#39; offset 10; Of course, you can use them like chains\nHero.where(name=\u0026#34;Thor\u0026#34;).order(\u0026#34;age\u0026#34;).limit(10).offset(10).select(\u0026#34;name\u0026#34;, \u0026#34;age\u0026#34;).find() ## select name, age from `marvel_hero` where name = \u0026#39;Thor\u0026#39; order by age asc limit 10 offset 10;"},{"idx":8,"href":"/docs/crud/update/","title":"Update","content":" Update Hero.where(name=\u0026#34;Thor\u0026#34;).set(age=1001).update() ## update `marvel_hero` set age=1001 where name = \u0026#39;Thor\u0026#39;;"},{"idx":9,"href":"/","title":"","content":""},{"idx":10,"href":"/categories/","title":"Categories","content":""},{"idx":11,"href":"/tags/","title":"Tags","content":""}];window.bookSearch={pages:pages,idx:lunr(function(){this.ref("idx");this.field("title");this.field("content");pages.forEach(this.add,this);}),}})();